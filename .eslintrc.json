{
  "root": true,
  "env": {
    "node": true
  },
  "parserOptions": {
    "ecmaVersion": 2018,
    "sourceType": "module"
  },
  "extends": ["eslint:recommended", "plugin:import/recommended"],
  "reportUnusedDisableDirectives": true,
  "rules": {
    "padding-line-between-statements": [
      "error",
      {
        "blankLine": "always",
        "prev": "*",
        "next": "return"
      }
    ],
    // Possible Errors
    "no-template-curly-in-string": "error",
    // Best Practices
    "array-callback-return": "error",
    "consistent-return": "error",
    "curly": "error",
    "default-param-last": "error",
    "dot-notation": [
      "error",
      {
        "allowKeywords": true
      }
    ],
    "eqeqeq": [
      "error",
      "always",
      {
        "null": "ignore"
      }
    ],
    "guard-for-in": "error",
    "no-alert": "error",
    "no-caller": "error",
    "no-constructor-return": "error",
    "no-console": "error",
    "no-debugger": "error",
    "no-else-return": "warn",
    "no-empty-function": [
      "warn",
      {
        "allow": ["constructors"]
      }
    ],
    "no-eval": "error",
    "no-extend-native": "error",
    "no-extra-bind": "error",
    "no-floating-decimal": "error",
    "no-implicit-coercion": "error",
    "no-implied-eval": "error",
    "no-invalid-this": "error",
    "no-iterator": "error",
    "no-labels": "error",
    "no-lone-blocks": "error",
    "no-loop-func": "error",
    "no-multi-str": "warn",
    "no-new": "error",
    "no-new-func": "error",
    "no-new-wrappers": "warn",
    "no-octal-escape": "warn",
    "no-param-reassign": "error",
    "no-proto": "error",
    "no-return-assign": "error",
    "no-script-url": "error",
    "no-self-compare": "warn",
    "no-sequences": "error",
    "no-unmodified-loop-condition": "error",
    "no-useless-call": "warn",
    "no-useless-concat": "warn",
    "no-useless-return": "warn",
    "no-void": "error",
    "no-warning-comments": "warn",
    "prefer-arrow-callback": "error",
    "radix": "error",
    "require-await": "warn",

    // Variables
    "init-declarations": "error",
    "no-shadow": "error",
    "no-undefined": "error",
    "no-unused-vars": "warn",

    // ECMAScript 6
    "no-var": "error",

    // Import
    "import/order": [
      "warn",
      {
        "groups": [
          "builtin",
          "external",
          "internal",
          "parent",
          "sibling",
          "index",
          "object"
        ],
        "pathGroups": [
          {
            "pattern": "~/**",
            "group": "internal"
          }
        ],
        "newlines-between": "always"
      }
    ],
    "import/no-relative-packages": "error",
    "import/no-unresolved": ["error", { "ignore": ["vitest/config"] }],
    "import/no-default-export": "error",
    "import/newline-after-import": ["error", { "considerComments": true }],
    "import/no-anonymous-default-export": "error",
    "import/no-empty-named-blocks": "error",
    "import/no-mutable-exports": "error",
    "import/no-self-import": "error",
    "import/no-useless-path-segments": "error",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": ["tests/**/*.{ts,tsx}", "./*.{js,ts}"]
      }
    ],
    "import/no-cycle": ["error"]
  },
  "overrides": [
    {
      "files": ["**/*.ts?(x)"],
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "env": {
        "es6": true,
        "browser": true,
        "node": false
      },
      "extends": [
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "plugin:@typescript-eslint/strict",
        "plugin:import/typescript"
      ],
      "rules": {
        "array-callback-return": "off",
        "consistent-return": "off",
        "no-shadow": "off",
        "no-unused-vars": "off",

        // Typescript Eslint
        "@typescript-eslint/no-shadow": "error",
        "@typescript-eslint/array-type": [
          "error",
          {
            "default": "generic",
            "readonly": "generic"
          }
        ],
        "@typescript-eslint/explicit-function-return-type": [
          "error",
          {
            "allowExpressions": true
          }
        ],
        "@typescript-eslint/unbound-method": [
          "error",
          {
            "ignoreStatic": true
          }
        ],
        "@typescript-eslint/no-unused-vars": [
          "error",
          { "argsIgnorePattern": "^_" }
        ],
        "@typescript-eslint/explicit-member-accessibility": "error",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-confusing-non-null-assertion": "error",
        "@typescript-eslint/no-confusing-void-expression": [
          "error",
          {
            "ignoreArrowShorthand": true
          }
        ],
        "@typescript-eslint/no-invalid-void-type": "error",
        "@typescript-eslint/no-non-null-asserted-nullish-coalescing": "error",
        "@typescript-eslint/no-require-imports": "error",
        "@typescript-eslint/no-unnecessary-boolean-literal-compare": "error",
        "@typescript-eslint/no-unnecessary-condition": "error",
        "@typescript-eslint/no-unnecessary-qualifier": "warn",
        "@typescript-eslint/no-unnecessary-type-arguments": "warn",
        "@typescript-eslint/non-nullable-type-assertion-style": "warn",
        "@typescript-eslint/prefer-for-of": "warn",
        "@typescript-eslint/prefer-function-type": "error",
        "@typescript-eslint/prefer-literal-enum-member": "error",
        "@typescript-eslint/prefer-optional-chain": "error",
        "@typescript-eslint/prefer-nullish-coalescing": "error",
        "@typescript-eslint/prefer-readonly": "error",
        "@typescript-eslint/prefer-reduce-type-parameter": "warn",
        "@typescript-eslint/prefer-string-starts-ends-with": "error",
        "@typescript-eslint/prefer-ts-expect-error": "error",
        "@typescript-eslint/require-array-sort-compare": "error",
        "@typescript-eslint/restrict-plus-operands": "error",
        "@typescript-eslint/switch-exhaustiveness-check": "error",
        "@typescript-eslint/consistent-generic-constructors": "warn",
        "@typescript-eslint/no-this-alias": [
          "error",
          {
            "allowedNames": ["that"]
          }
        ],
        "@typescript-eslint/no-import-type-side-effects": "error",
        "@typescript-eslint/consistent-type-imports": [
          "error",
          {
            "prefer": "type-imports",
            "fixStyle": "inline-type-imports",
            "disallowTypeAnnotations": false
          }
        ]
      }
    },
    {
      "files": ["./*.ts"],
      "rules": {
        "import/no-default-export": "off"
      }
    },
    {
      "files": ["src/**/*.ts?(x)", "tests/**/*.ts?(x)"],
      "extends": ["plugin:react/recommended", "plugin:react-hooks/recommended"],
      "settings": {
        "react": {
          "version": "detect"
        }
      },
      "rules": {
        "no-restricted-syntax": [
          "error",
          {
            "selector": "CallExpression:has(:matches(.callee, .callee.property)[name=/(useTransmittingImpulse|use(Scoped)?(|Memo|Callback|Effect|LayoutEffect))/]) > .arguments:nth-child(2) > [name='scope']",
            "message": "The `scope` dependency changes on each component's re-render. Please use `scope` provided as the first argument in the `useScoped*` hooks."
          },
          {
            "selector": "CallExpression[callee.name=/useScoped(|Memo|Callback|Effect|LayoutEffect)/] > .arguments:nth-child(1)[params.length=0]",
            "message": "The `scope` argument of the hook effect is not used, consider using React effect hooks instead of Impulse scoped hooks."
          },
          {
            "selector": "CallExpression:has(:matches(.callee, .callee .object)[name='scoped']) > .arguments:nth-child(1) > .params:nth-child(1):not(:has(.properties[key.name='scope']))",
            "message": "The `scope` prop is not used, consider using the component without wrapping it in the `scoped` HOC."
          },
          {
            "selector": "CallExpression:has(:matches(.callee, .callee .object)[name='scoped']) > .arguments:nth-child(1) > .params:nth-child(1) > .properties[key.name='scope'] > .value[name!='scope']",
            "message": "Do not rename the `scope` prop created by the `scoped` HOC."
          }
        ],

        "no-restricted-imports": [
          "error",
          {
            "patterns": [
              {
                "group": ["react", "use-sync-external-store"],
                "message": "Import dependencies from dependencies.ts. It makes the imported deps appear only ones in the bundle."
              }
            ]
          }
        ],

        // React Eslint
        "react/button-has-type": ["warn", { "reset": false }],
        "react/prop-types": "off",
        "react/jsx-curly-brace-presence": "error",
        "react/display-name": "off",

        // React Hooks
        "react-hooks/exhaustive-deps": [
          "error",
          {
            "additionalHooks": "(use(\\w+)(Memo|Effect)|useScoped|useTransmittingImpulse)"
          }
        ]
      }
    },
    {
      "files": ["tests/**/*.ts?(x)"],
      "extends": [
        "plugin:jest/recommended",
        "plugin:jest/style",
        "plugin:jest-dom/recommended"
      ],
      "rules": {
        "jest/no-done-callback": "off",
        "jest/no-deprecated-functions": "off",
        "jest/no-duplicate-hooks": "warn",
        "jest/no-if": "error",
        "jest/no-test-return-statement": "error",
        "jest/prefer-comparison-matcher": "warn",
        "jest/prefer-equality-matcher": "warn",
        "jest/prefer-hooks-on-top": "warn",
        "jest/prefer-hooks-in-order": "warn",
        "jest/prefer-spy-on": "error",
        "jest/prefer-strict-equal": "error",
        "jest/prefer-todo": "warn",
        "jest/no-focused-tests": "error",
        "jest/no-commented-out-tests": "error",
        "jest/consistent-test-it": ["error", { "fn": "it" }],
        "jest/expect-expect": [
          "warn",
          {
            "assertFunctionNames": ["expect*"]
          }
        ],
        "@typescript-eslint/explicit-function-return-type": "off",
        "no-undefined": "off",
        "no-restricted-imports": [
          "error",
          {
            "patterns": [
              {
                "group": ["../src/*"],
                "message": "Import only ../src for tests"
              }
            ]
          }
        ]
      }
    }
  ]
}
